shaharha1,omercarbonne
314918483,209193523

1. מחלקת Sell- מנהלת את ממשק המשתמש.
מחזיקה מופעים של המחלקות: 
imageFunctions - המופע מוכנס למופע של AsciiArtAlgorithm לשם האתחול,
ומשמש לשינוי התמונה והרזולוציה וביצע השלבים הראשונים של עיבוד התמונה
לפני הקישור לתוים.
SubImgCharMatcher - המופע מוכנס למופע של AsciiArtAlgorithm לשם האתחול,
ומשמש להגדרת התוים שנמצאים בסט, והתאמת כל תו לרמת בהירות מתאימה.
ֿ AsciiArtAlgorithm - מאותחל כפי שמתואר למעלה, משמש להרצת האלגוריתם ובעצם
מהווה אינטגרציה בין המופעים של AsciiArtAlgorithm ו-SubImgCharMatcher.
AsciiOutput - ממשק, כולל בתוכו את אחד ממופעי המחלקות ConsoleAsciiOutput או 
HtmlAsciiOutput השמשות להצגת הפלט הסופי. המחלקות משתנות בהתאם להוראות המשתמש.

מחלקת - imageFunctions - משמשת לביצוע כלל הפעולות של עיבוד התמונה הראשוניות
לפני האינטגרציה עם התווים, כלומר ריפוד התמונה, צביעה באפור, חלוקה לרזולוציה
רצויה והתאמת הבהירות לכל תא. המחלקה מאפשרת שינוי של התמונה או הרזולוציה,
וכשהיא מתבקשת לתת את התוצר הסופי, היא תבצע את התהליך רק מהמקום שהשתנה,
וזאת ע״י שמירה של התוצר לאחר כל שלב. למשל אם רק הרזולוציה השתנתה, היא
תשתמש באותה תמונה מרופדת ותבצע את האלגורתים משם והלאה, אם שום דבר לא השתנה,
היא תעביר את התוצר שכבר שמור אצלה.
מופע של מחלקה זו נמצא בשליטה של ה-Shell על מנת שתוכל לבצע שינויים,
ומועבר ל-AsciiArtAlgorithm לשם ביצוע האלגוריתם.

מחלקת SubImgCharMatcher - מכילה את רשימת התוים בהם אנו רוצים להשתמש,
ומתאימה לכל תו את רמת הבהירות שלו. בנוסף, היא מאפשרת הזנה של ערך בהירות,
וקבלה של התו עם ערך הבהירות הקרוב ביותר מהתוים הקיימים. המחלקה מאפשרת
הוספה והכנסה של תווים נוספים, אך את החישוב של הבהירות לכל תו תבצע רק
כאשר תתבקש להעביר נתוני בהירות החוצה (פירוט בהסבר זמן ריצה). 
מופע של מחלקה זו נמצא בשליטה של ה-Shell על מנת שתוכל לבצע שינויים,
ומועבר ל-AsciiArtAlgorithm לשם ביצוע האלגוריתם.

מחלקת AsciiArtAlgorithm - משמשת לאינטגרציה בין מחלקות
imageFunctions ו-SubImgCharMatcher ובעצם מפעילה את האלגוריתם
שבסופו מתקבלת התמונה הערוכה.
מופע של מחלקה זו נמצא בשליטה של ה-Shell.

ממשק AsciiOutput - ממשק המייצג שתי מחלקו
 ConsoleAsciiOutput, HtmlAsciiOutput והמאפשר הצגה של תוצאות האלגוריתם
מופע שלו נמצא בשליטת ה-Shell אשר עושה בו שימוש לצורך זה.

מחלקת Image - מחלקה שהגיעה מוכנה. מייצגת תמונה ומשומשת בכל
המחלקות שעושות שימוש בתמונות.

מחלקת KeyboardInput - מחלקה שהגיעה מוכנה. מופע שלה נמצא
ב-Shell והיא מאפשרת קבלת קלט מהמשתמש.

מחלקת CharConverter - מחלקה שהגיעה מוכנה. משמשת לשם קביעת רמת
הבהירות של כל תו, ומופע שלה נמצא במחלקה SubImgCharMatcher אשר מבצעת חישוב כזה.

2. * מבנה הנתונים שנמצא בכל מופע של -  SubImgCharMatcher:
	השתמשנו בשני מבני נתונים שפועלים יחד, אחד מהם זה HashSet
	של התווים שנמצאים באותו רגע במופע. באמתעות השימוש בסט זה אנו
	יכולים לקבל במהירות (ממוצע של O(1)) האם תו נמצא בסט, או איננו נמצא,
	ובהתאם לכך לבצע את הפעולות של הכנסה או הוצאה של תווים במהירות וללא כפילויות.
	יש לציין כי מכיוון שמדובר בסט אז כל אותו יכולה להופיע רק פעם אחת
	וזאת בהתאם לדרישות, וגם חוסכת מקום.
בנוסף, השתמשנו גם במבנה נתונים של  TreeMap על מנת להתאים לכל תו
בסט את רמת הבהירות שלו, כאשר המפתחות הן רמות הבהירות והערכים הם האותיות.
עשינו זאת מכיוון שהפעולה שקוראת הכי הרבה היא לא חיפוש של תו מסוים,
אלא חיפוש רמת בהירות הקרובה ביותר לרמה הבהירות המתבקשת והפלט
הוא האות המתאימה, ומבנה של עץ מאפשר לעשות זאת ב-O(logn).
אמנם נראה כי בכל פעם שנוסיף או נחסיר תו נאלץ לבנות את העץ מחדש,
אך התאמנו את הקוד כך שהעץ יבנה מסט התווים מחדש רק כאשר עושים שימוש
במופע על מנת לקבל תוים, ולכן פעולה הבנייה מחדש תתבצע לעיתים רחוקות.
בנוסף, בעת בניית העץ אם תו מסוימת מקבל את אותו ערך כמו תו אחר
נבדוק מי התו עם ערך האסקי הנמוך יותר, והוא זה שיהיה הערך של
אותה הבהירות - חיסכון במקום.

אין מבני נתונים נוספים בקוד מלבד מערכים המשמשים לאחסון של התמונות במהלך הריצה.

3. שגיאות
עשינו הפרדה בין שגיאות של הכנסת פקודות לא חוקיות כאשר
הטעות היא אצל המשתמש, ובין שגיאות שהתוכנה שלנו חוסמת
לכל השגיאות של קלט משתמש, כלומר בכל פעם שהמשתמש הכניס קלט
שלא נמצא בתבנית הנכונה, הפונקציה שמופעלת בתוך מתודת ה-run()
תזרוק אובייקט חריגה מסוג IOException עם ההודעה המתאימה,
ומתודת ה-run() תתפוס את השגיאה ותדפיס את ההודעה.
לשגיאות מהסוג השני, למשל כאשר המשתמש מנסה לשנות את הרזולוציה
מעבר לערכי האפשריים, או כשמתבצע ניסיון הרצה כאשר סט התווים ריק,
בנינו מחלקות פרטיות של שגיאות מותאמות כך שבמקרה והן אלו שיזרקו,
ה-run() יתפוס אותן ויציג את ההודעה המתאימה.

4. public void printCharSetSorted() - מתודה המאפשרת הדפסה של כל
התוים שנמצאים בסט של המופע באופן ממוין. הסופנו את אופציה זאת על
מנת שה-shell לא יצטרך לבצע זאת בעצמו, וזאת מכיוון ש״מבנה הנתונים״
של ה-shell המאפשר שמירה ומעקב אחר כמות התוים בהם עושים שימוש, הוא
בעצם ה-SubImgCharMatcher.

public boolean isEmpty() - מאפשר בדיקה אם סט התווים ריק, וזאת
על מנת שה-shell יוכל לבדוק זאת לפני שיפעיל את האלגוריתם על סט
תווים ריק, ולהדפיס הודעת שגיאה מתאימה למשתמש. 

5. לא הכנסנו שינויים
