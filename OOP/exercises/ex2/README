shaharha1,omercarbonne
314918483,209193523

1. בחרנו באופציה 2 - העברת מופע של BrickerGameManager לבנאי של BasicCollisionStrategy.
	ייתרונות -א) שמירה על אינקפסולציה וחלוקת אחריות בין מחלקות. המחלקה של הניהול משחק 
				 היא זאת שאחראית למחוק אובקייטים מהמשחק בפועל ולא מחלקות אחרות.
			ב) אופציה למחזור קוד, אם נרצה בעתיד למחוק איברים שהם אינם הלבנים ואין להם 
			   אסטרטגיה, נוכל להשתמש במתודות שכבר כתבתנו.
	חסרונות - סיבוך של הקוד, אנחנו שומרים מחלקה שהרבה יותר גבוהה בהיררכיה בתור שדה 
			  במחלקה תחתונה (האסטרטגיה).

2. השתמשנו בשתי מחלקות שונות:
	* מחלקת TextRenderabe שעליה הוסבר בהוראות התרגיל, ובאמצעותה הצגנו את מספר החיים
	שנותרו לשחקן בפינה השמאלית התחתונה של המסך.
	* יצרנו מחלקה בשם Heartscell שמחזיקה בתוכה מערך של אובייקטים בצורת לב, וממקמת אותם
	בתחתית המשך משמאל לימין.המחלקה מקבלת רפרנס לGameManager
	ובאמצועותו יכולה להציג ולהסיר לבבות מהמסך, כאשר תחילה כשמופע של המחלקה מאותחל מציג
	רק את שלושת הלבבות הראשונים. בנוסף, ה-BrickGameManager 
	מחזיק משתנה איתו הוא סופר את מספר החיים שנותרו לשחקן, ובאמצעותו יכול להגיד
	ל-Heartscell איזה לב להציג/להסתיר מתוך המערך.

3. אסטרטגיית כדור כפול - הוספנו ל-BrickerGameManager מערך בשם Pucks שכולל בתוכו
   כדורים (Ball) שיתווספו למשחק, ובנוסף משתנה בשם 
	puckCounter שסופר את כמות הכדורים שנוצרו עד כה. בעת פגיעה בלבנה עם אסרטגייה זו,
	האטסטרטגיה מפעילה דרך ה-BrickerGameManager
	פונקציה שמוסיפה Puck חדש למשחק בתא הבא במערך, והוא פועל בדיוק כמו כדור רגיל.
	בכל update של ה-BrickerGameManager הוא רץ
	על המערך ובודק אם כדור מסוים יצא מהמסך, אם כן, מסיר אותו.
   אסטרטגיית דיסקית נוספת - ה-BrickerGameManager מחזיק אובייקט נוסף של דיסקית שבתחילת
   המשחק אינה מוצגת, ומשתנה בשם collisionCounter שנמצא במחלקה paddle ומטרתו לבדוק את
   כמות ההתנגשויות בין הכדורים לדיסקית הנוספת ומאותחל ל-4 (מקסימום פגיעות). בעת הפעלת האסטרטגיה,
	נבדוק האם הדיסקית כבר מוצגת באמצעות בדיקה של ה-counter (אם קטן מ-4) ואם לא, נציג אותה מחדש,
	נמרכז במקום ונאפס את ה-counter.
   אסטרטגיית מצלמה - השתמשנו ב-collisionCounter של הכדור המרכזי על מנת לספור את כמות
   הפגיעות ברגע שאסטרטגיית המצלמה מופעלת, כעת אפקט המצלמה יתבטל רק כש-collisionCounter 
   יהיה גדול ב-4 מהערך שלו בעת הפעלת האסטרטגייה. 
  אסטרטגיית לב נופל - הוספנו מחלקה בשם FallingHeart שמקבלת אובייקט של BrickerGameManager 
  ואת ממדי החלון, ויוצרת מופע של לב נופל שיוצא ממרכז הלבנה שנפגעה.
  בנוסף, העצמים במחלקה זו אחראים על עצמם ואם הלב יוצא מגבולות המסך הוא מוציא את עצמו מהמשחק.
  אם הלב פוגע בדיסקית הראשית (מבדילים באמצעות tag), וגם עוד לא הגענו למקסימום החיים,
  נוסיף חיים גם בתצוגה הנומרית וגם הוויזואלית.
	
4. תחילה בנינו מפעל שמייצר אסטרטגיות לפי האחוזים שהוסברו, כאשר הוא מקבל את ה-BrickerGameManager
   ורפרנס למשתנה שנמצא בכל מופע Brick שנקרא doubleCounter.
   בכל פעם שמשתמשים מפעל על מנת לקבל את האסטרטגייה מעבירים ערך בוליאני שקובע אם להגריל
   גם אסטרטגייה בסיסים (אם דרך double אז אין את הבסיסי).
   אסטרטגיית double מכילה שתי אסטרטגיות אחרות, אשר מתקבלות בעת האתחול ע"י שימוש במפעל
   (וערך בוליאני שלא יאפשר הגרלה של אסטרטגייה פשוטה). 
   אם האסטרטגייה שנבחרת היא double, אז המפעל מגדיל ב-1 את ה-doubleCounter של אותה הלבנה.
   כאשר המפעל מגריל את האסטרטגיה הוא בודק את ה-doubleCounter, 
   אם הוא שווה ל-2 אז כבר הופעלו פעמיים אסטרטגיות double באותה לבנה ולכן הוא לא יאפשר
   בחירה של אסטרטגייה זו שוב, וכך נמנע מקבלת ארבע אסטרטגיות.
   
5. Paddle - הוספנו ל-Paddle את ה-collisionCounter כפי שמפורט בשאלה 3 באסטרטגיית הדיסקית הנוספת,
   וזאת על מנת שנוכל לספור את ההתנגשויות של דיסקית זו עם הכדורים ולמחוק אותה בזמן הנכון.